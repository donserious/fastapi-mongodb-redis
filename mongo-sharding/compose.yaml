version: '3'
services:
  pymongo_api:
    container_name: mongo-sharding
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos-router 
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://mongos-router:27020"
      MONGODB_DATABASE_NAME: "somedb"

  configSrv:
    image: mongo:latest # docker образ
    container_name: configSrv 
    restart: always
    depends_on:
     - shard1
     - shard2
    ports:
      - 27017:27017
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",  #запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ] 
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27017" , "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1:
    image: mongo:latest
    container_name: shard1
    restart: always
    ports:
      - 27018:27018
    volumes:
      - shard1-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27018" , "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2:
    image: mongo:latest
    container_name: shard2
    restart: always
    ports:
      - 27019:27019
    volumes:
      - shard2-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплик
        "--bind_ip_all", #обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27019" , "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
  
  mongos-router:
    image: mongo:latest
    container_name: mongos-router
    restart: always
    ports:
      - 27020:27020
    depends_on:
     - configSrv 
    command:
      [
        "mongos", #обычная mongo в режиме роутера
        "--configdb", 
        "config_server/configSrv:27017", #передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27020" , "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s


volumes:
  config-data:
  shard1-data:
  shard2-data:



